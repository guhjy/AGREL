Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!CorrCoef) (Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
if(CorrCoef) ((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
}
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
ResultsSecLoop <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}else if(CorrCoef){
ResultsSecLoop <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}
}
if(j!=k) ResultsSecLoop else NA
}
InnerLoop[is.na(InnerLoop)] <- Kj
InnerLoop
}
N.bt
KappaMatrix <- foreach(j=UniqValues,.combine="rbind") %do% {
# Intraclass Kappa
Pj <- sum(apply(df,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(df,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
# CI
if(CI.est){
BtResKj <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
((sum(apply(z,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
}
CI <- quantile(BtResKj,c(0.025,0.975))
Kj <- paste(round(Kj,3)," (",round(CI[1],3)," to ",round(CI[2],3),")",sep="")
}
# Off-diagonal elements
InnerLoop <- foreach(k=UniqValues,.combine="c",.export="Bt.j") %dopar% {
Pk <- sum(apply(df,1,function(x) sum(x==k)))/(N*R)
if(which(UniqValues==j)<which(UniqValues==k)){
CorrCoef = F
Kjk <- (Pj*Pk - (sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
ResultsSecLoop <- Kjk
}else if(which(UniqValues==j)>which(UniqValues==k)){
CorrCoef = T
Lambda_jk <- ((sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
ResultsSecLoop <- Lambda_jk
}
# CI
if(CI.est & j!=k){
Bt.k <- k
Pj.o <- Pj
BtResOffD <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!CorrCoef) (Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
if(CorrCoef) ((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
}
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
ResultsSecLoop <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}else if(CorrCoef){
ResultsSecLoop <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}
}
if(j!=k) ResultsSecLoop else NA
}
InnerLoop[is.na(InnerLoop)] <- Kj
InnerLoop
}
require(foreach)
BtResKj <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
((sum(apply(z,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
}
InnerLoop <- foreach(k=UniqValues,.combine="c",.export="Bt.j") %dopar% {
Pk <- sum(apply(df,1,function(x) sum(x==k)))/(N*R)
if(which(UniqValues==j)<which(UniqValues==k)){
CorrCoef = F
Kjk <- (Pj*Pk - (sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
ResultsSecLoop <- Kjk
}else if(which(UniqValues==j)>which(UniqValues==k)){
CorrCoef = T
Lambda_jk <- ((sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
ResultsSecLoop <- Lambda_jk
}
# CI
if(CI.est & j!=k){
Bt.k <- k
Pj.o <- Pj
BtResOffD <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!CorrCoef) (Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
if(CorrCoef) ((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
}
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
ResultsSecLoop <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}else if(CorrCoef){
ResultsSecLoop <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}
}
if(j!=k) ResultsSecLoop else NA
}
InnerLoop <- foreach(k=UniqValues,.combine="c",.export="Bt.j") %do% {
Pk <- sum(apply(df,1,function(x) sum(x==k)))/(N*R)
if(which(UniqValues==j)<which(UniqValues==k)){
CorrCoef = F
Kjk <- (Pj*Pk - (sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
ResultsSecLoop <- Kjk
}else if(which(UniqValues==j)>which(UniqValues==k)){
CorrCoef = T
Lambda_jk <- ((sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
ResultsSecLoop <- Lambda_jk
}
# CI
if(CI.est & j!=k){
Bt.k <- k
Pj.o <- Pj
BtResOffD <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!CorrCoef) (Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
if(CorrCoef) ((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
}
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
ResultsSecLoop <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}else if(CorrCoef){
ResultsSecLoop <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}
}
if(j!=k) ResultsSecLoop else NA
}
KappaMatrix <- foreach(j=UniqValues,.combine="rbind") %do% {
# Intraclass Kappa
Pj <- sum(apply(df,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(df,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
# CI
if(CI.est){
BtResKj <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
((sum(apply(z,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
}
CI <- quantile(BtResKj,c(0.025,0.975))
Kj <- paste(round(Kj,3)," (",round(CI[1],3)," to ",round(CI[2],3),")",sep="")
}
# Off-diagonal elements
InnerLoop <- foreach(k=UniqValues,.combine="c",.export="Bt.j") %do% {
Pk <- sum(apply(df,1,function(x) sum(x==k)))/(N*R)
if(which(UniqValues==j)<which(UniqValues==k)){
CorrCoef = F
Kjk <- (Pj*Pk - (sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
ResultsSecLoop <- Kjk
}else if(which(UniqValues==j)>which(UniqValues==k)){
CorrCoef = T
Lambda_jk <- ((sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
ResultsSecLoop <- Lambda_jk
}
# CI
if(CI.est & j!=k){
Bt.k <- k
Pj.o <- Pj
BtResOffD <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!CorrCoef) (Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
if(CorrCoef) ((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
}
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
ResultsSecLoop <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}else if(CorrCoef){
ResultsSecLoop <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}
}
if(j!=k) ResultsSecLoop else NA
}
InnerLoop[is.na(InnerLoop)] <- Kj
InnerLoop
}
KappaMatrix
KappaMatrix <- foreach(j=UniqValues,.combine="rbind") %do% {
# Intraclass Kappa
Pj <- sum(apply(df,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(df,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
# CI
if(CI.est){
BtResKj <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
((sum(apply(z,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
}
CI <- quantile(BtResKj,c(0.025,0.975))
Kj <- paste(round(Kj,3)," (",round(CI[1],3)," to ",round(CI[2],3),")",sep="")
}
# Off-diagonal elements
InnerLoop <- foreach(k=UniqValues,.combine="c") %do% {
Pk <- sum(apply(df,1,function(x) sum(x==k)))/(N*R)
if(which(UniqValues==j)<which(UniqValues==k)){
CorrCoef = F
Kjk <- (Pj*Pk - (sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
ResultsSecLoop <- Kjk
}else if(which(UniqValues==j)>which(UniqValues==k)){
CorrCoef = T
Lambda_jk <- ((sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
ResultsSecLoop <- Lambda_jk
}
# CI
if(CI.est & j!=k){
Bt.k <- k
Pj.o <- Pj
BtResOffD <- foreach(1:N.bt,.combine="c") %dopar% {
Nboot <- sample(1:nrow(df),nrow(df),replace=T)
z <- df[Nboot,]
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!CorrCoef) ((Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk))
if(CorrCoef) ((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
}
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
ResultsSecLoop <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}else if(CorrCoef){
ResultsSecLoop <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}
}
if(j!=k) ResultsSecLoop else NA
}
InnerLoop[is.na(InnerLoop)] <- Kj
InnerLoop
}
KappaMatrix <- foreach(j=UniqValues,.combine="rbind") %do% {
# Intraclass Kappa
Pj <- sum(apply(df,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(df,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
# CI
if(CI.est){
Bt.j <- j
BtResKj <- replicate(N.bt,BtSamples(df,fun=function(z,j=Bt.j){
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(z,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
return(Kj)
}))
CI <- quantile(BtResKj,c(0.025,0.975))
Kj <- paste(round(Kj,3)," (",round(CI[1],3)," to ",round(CI[2],3),")",sep="")
}
# Off-diagonal elements
InnerLoop <- foreach(k=UniqValues,.combine="c",.export="Bt.j") %dopar% {
Pk <- sum(apply(df,1,function(x) sum(x==k)))/(N*R)
if(which(UniqValues==j)<which(UniqValues==k)){
CorrCoef = F
Kjk <- (Pj*Pk - (sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
ResultsSecLoop <- Kjk
}else if(which(UniqValues==j)>which(UniqValues==k)){
CorrCoef = T
Lambda_jk <- ((sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
ResultsSecLoop <- Lambda_jk
}
# CI
if(CI.est & j!=k){
Bt.k <- k
Pj.o <- Pj
BtResOffD <- replicate(N.bt,BtSamples(df,fun=function(z,j=Bt.j,k=Bt.k,Lambda=CorrCoef){
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!Lambda) return((Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk))
if(Lambda) return(((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk))))
}))
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
ResultsSecLoop <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}else if(CorrCoef){
ResultsSecLoop <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}
}
if(j!=k) ResultsSecLoop else NA
}
InnerLoop[is.na(InnerLoop)] <- Kj
InnerLoop
}
j
k
doParallel::stopImplicitCluster()
NrCores = parallel::detectCores() - 1
doParallel::registerDoParallel(cores=NrCores)
system.time({KappaMatrix <- foreach(j=UniqValues,.combine="rbind") %do% {
# Intraclass Kappa
Pj <- sum(apply(df,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(df,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
# CI
if(CI.est){
Bt.j <- j
BtResKj <- replicate(N.bt,BtSamples(df,fun=function(z,j=Bt.j){
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(z,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
return(Kj)
}))
CI <- quantile(BtResKj,c(0.025,0.975))
Kj <- paste(round(Kj,3)," (",round(CI[1],3)," to ",round(CI[2],3),")",sep="")
}
# Off-diagonal elements
InnerLoop <- foreach(k=UniqValues,.combine="c",.export="Bt.j") %dopar% {
Pk <- sum(apply(df,1,function(x) sum(x==k)))/(N*R)
if(which(UniqValues==j)<which(UniqValues==k)){
CorrCoef = F
Kjk <- (Pj*Pk - (sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
ResultsSecLoop <- Kjk
}else if(which(UniqValues==j)>which(UniqValues==k)){
CorrCoef = T
Lambda_jk <- ((sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
ResultsSecLoop <- Lambda_jk
}
# CI
if(CI.est & j!=k){
Bt.k <- k
Pj.o <- Pj
BtResOffD <- replicate(N.bt,BtSamples(df,fun=function(z,j=Bt.j,k=Bt.k,Lambda=CorrCoef){
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!Lambda) return((Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk))
if(Lambda) return(((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk))))
}))
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
ResultsSecLoop <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}else if(CorrCoef){
ResultsSecLoop <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",round(CI2[2],3),")",sep="")
}
}
if(j!=k) ResultsSecLoop else NA
}
InnerLoop[is.na(InnerLoop)] <- Kj
InnerLoop
}
rownames(KappaMatrix) <- colnames(KappaMatrix) <- UniqValues
KappaMatrix
})
system.time({
for(j in UniqValues){
# Kappa coefficients Kj
Pj <- sum(apply(df,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(df,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
# CI
if(CI.est){
Bt.j <- j
BtResKj <- replicate(N.bt,BtSamples(df,fun=function(z,j=Bt.j){
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Kj <- ((sum(apply(z,1,function(x) sum(x==j)*(sum(x==j) - 1)))/(R*(R-1)*N)) - Pj^2)/(Pj*(1-Pj))
return(Kj)
}))
CI <- quantile(BtResKj,c(0.025,0.975))
Kj <- paste(round(Kj,3)," (",round(CI[1],3)," to ",round(CI[2],3),")",sep="")
}
KappaMatrix[which(UniqValues==j),which(UniqValues==j)] <- Kj
# Off-diagonal elements
for(k in UniqValues){
Pk <- sum(apply(df,1,function(x) sum(x==k)))/(N*R)
if(which(UniqValues==j)<which(UniqValues==k)){
CorrCoef = F
Kjk <- (Pj*Pk - (sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk)
KappaMatrix[which(UniqValues==j),which(UniqValues==k)] <- Kjk
}else if(which(UniqValues==j)>which(UniqValues==k)){
CorrCoef = T
Lambda_jk <- ((sum(apply(df,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk)))
KappaMatrix[which(UniqValues==j),which(UniqValues==k)] <- Lambda_jk
}
# CI
if(CI.est & j!=k){
Bt.k <- k
Pj.o <- Pj
BtResOffD <- replicate(N.bt,BtSamples(df,fun=function(z,j=Bt.j,k=Bt.k,Lambda=CorrCoef){
Pj <- sum(apply(z,1,function(x) sum(x==j)))/(N*R)
Pk <- sum(apply(z,1,function(x) sum(x==k)))/(nrow(z)*ncol(z))
if(!Lambda) return((Pj*Pk - (sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)))/(Pj*Pk))
if(Lambda) return(((sum(apply(z,1,function(x) sum(x==j)*sum(x==k)))/(R*(R-1)*N)) - Pj*Pk)/(sqrt(Pj*(1-Pj)*Pk*(1-Pk))))
}))
CI2 <- quantile(BtResOffD,c(0.025,0.975),na.rm=T)
if(!CorrCoef){
KappaMatrix[which(UniqValues==j),which(UniqValues==k)] <- paste(round(Kjk,3)," (",round(CI2[1],3)," to ",
round(CI2[2],3),")",sep="")
}else if(CorrCoef){
KappaMatrix[which(UniqValues==j),which(UniqValues==k)] <- paste(round(Lambda_jk,3)," (",round(CI2[1],3)," to ",
round(CI2[2],3),")",sep="")
}
}
}
}
})
pc.hibernate()
?doParallel
Fl.k <- FleissK(df)
require(AGREL)
Fl.k <- FleissK(df)
Flk
Fl.k
library(AGREL)
Kappa.Matrix(Psy2)
Kappa.Matrix(Psy2,CI.est = T,parallel = T)
library(AGREL)
Kappa.Matrix(Psy2,CI.est = T,parallel = T)
Kappa.Matrix(Psy2)
Psy2
colnames(Psy2) <- paste("rater",1:6,sep="")
Psy2
getwd()
dataPath <- paste(getwd(),"/data",sep="")
write.table(Psy2,write.table(paste(dataPath,"/PsychMorbid.txt",sep="")))
write.table(Psy2,paste(dataPath,"/PsychMorbid.txt",sep=""))
Psy
colnames(Psy)[3] <- "schizophrenia"
Psy
write.table(Psy,paste(dataPath,"/PsychMorbidOrig.txt",sep=""))
library(AGREL)
data("PsychMorbidOrig")
PsychMorbidOrig
FleissK(PsychMorbid)
Kappa.Matrix(PsychMorbid)
for(i in 1:nrow(Psy)){
x <- Psy[i,]
Psy2 <- rbind(Psy2,rep(colnames(x),x))
}
warnings()
Psy <- read_excel("C:/Users/u0095171/Google Drive/werk UZ Leuven_acer/ongoing analyses - to be submitted/IETA 2/wd/fleiss kappa without paradoxed data/flk.xlsx")
Psy2 <- NULL
colnames(Psy)[3] <- "schizophrenia"
for(i in 1:nrow(Psy)){
x <- Psy[i,]
Psy2 <- rbind(Psy2,rep(colnames(x),x))
}
Psy2 <- as.data.frame(Psy2)
FleissK(Psy2)
Psy2
write.table(Psy2,paste(dataPath,"/PsychMorbid.txt",sep=""))
library(AGREL)
library(AGREL)
rm(list=ls())
library(AGREL)
library(AGREL)
library(AGREL)
ls()
data("PsychMorbid")
CohenK(PsychMorbid) -> meh
CohenK(PsychMorbid[,1:2]) -> meh
meh
library(AGREL)
library(AGREL)
CohenK(PsychMorbid[,1:2]) -> meh
meh
object <- meh
class(object)
?do.call
MethAGREL <- class(object)
xdata <- PsychMorbid
do.call(MethAGREL,data=xdata)
do.call(MethAGREL,args=list(data=xdata))
xdata
MethAGREL
do.call(MethAGREL,args=list(ratings=xdata))
xdata <- PsychMorbid[,1:2]
do.call(MethAGREL,args=list(ratings=xdata))
library(AGREL)
CohenK(PsychMorbid) -> object
library(AGREL)
CohenK(PsychMorbid) -> object
CohenK(PsychMorbid[,1:2]) -> object
n <- length(object$ratings)
object$ratings
CohenK(PsychMorbid[,1:2]) -> object
object
library(AGREL)
n <- length(object$ratings)
ResJack <- jackknife(1:n,theta,xdata=object$ratings)
MethAGREL <- class(object)
theta <- function(x,xdata){
do.call(MethAGREL,args=list(ratings=xdata))
}
n <- length(object$ratings)
ResJack <- jackknife(1:n,theta,xdata=object$ratings)
CohenK(PsychMorbid[,1:2]) -> object
ResJack <- jackknife(1:n,theta,xdata=object$ratings)
theta <- function(x,xdata){
do.call(MethAGREL,args=list(ratings=xdata))$value
}
n <- length(object$ratings)
ResJack <- jackknife(1:n,theta,xdata=object$ratings)
library(AGREL)
CohenK(PsychMorbid[,1:2]) -> owzot
ConfintJack(owzot)
library(AGREL)
library(AGREL)
ConfintJack(owzot)
alpha=0.05
1-alpha/2
library(AGREL)
library(AGREL)
value <- 1
cat(paste("\n\nCohen's Kappa = ",value,"\n\n",sep=""))
library(AGREL)
