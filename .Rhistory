list(unlist(ArgzLegend), legend = diff.raters, ncol = 2, pch = symbols)
list(ArgzLegend, legend = diff.raters, ncol = 2, pch = symbols)
append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols))
ArgLegend = append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols))
Legend = T
if(Legend) legend(ArgzLegend)
ArgzLegend
ArgLegend = append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols))
if(Legend) legend(ArgzLegend)
append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols))
ArgzLegend = append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols))
if(Legend) legend(ArgzLegend)
ArgzLegend
if(Legend) do.call("legend", ArgzLegend)
ArgzLoess = list(span = 1, degree = 1)
ArgzLoessLCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (-1.96*(temp2))[order(mean.per.subj[,2])]))
ArgzLoessUCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (1.96*(temp2))[order(mean.per.subj[,2])]))
LoessLCL = do.call("loess.smooth", ArgzLoessLCL)
lines(LoessLCL$x, LoessLCL$y, lwd = 2)
LoessUCL = do.call("loess.smooth", ArgzLoesULCL)
LoessUCL = do.call("loess.smooth", ArgzLoessULCL)
LoessUCL = do.call("loess.smooth", ArgzLoessUCL)
lines(LoessUCL$x, LoessUCL$y, lwd = 2)
BAplotMultipleR <- function(rater, subject, variable, data, LoA = c("Default", "loess"), ArgzLoess = list(span = 1, degree = 1),
symbols.graph=NULL, colSymbols=NULL,
Legend = F, ArgzLegend = list(x = "topright"),
xlab="Average", ylab="Difference",
...){
if(missing(data)|!is.data.frame(data)) stop(paste(data,"must be of type dataframe"))
arguments =  as.list(match.call())
LoA = match.arg(LoA)
if(Legend && !is.list(ArgzLegend)) stop("ArgzLegend must be of type list.")
data$rater = eval(arguments$rater,data)
if(!is.factor(data$rater)) data$rater = tryCatch(as.factor(data$rater), warning = function(w) stop("Conversion of rater to factor failed"),
error = function(e) stop("Conversions of rater to factor failed"))
data$subject = eval(arguments$subject,data)
if(!is.factor(data$subject)) data$subject = tryCatch(as.factor(data$subject), warning = function(w) stop("Conversion of subject to factor failed"),
error = function(e) stop("Conversions of subject to factor failed"))
data$var = eval(arguments$variable,data)
if(!is.numeric(data$var)) data$var = tryCatch(as.numeric(data$var),
warning = function(w) stop("Conversion of variable to numeric failed"),
error = function(e) stop("Conversions of variable to numeric failed"))
if(anyNA(data$var)) stop("Missing values detected.")
summ = summary(aov(var ~ subject + rater, data = data))
MSE  = summ[[1]]$`Mean Sq`[3]
m = length(unique(data$subject))
# Plot
mean.per.subj  = with(data, aggregate(var, by = list(subject), mean))
diff.raters    = unique(data$rater)
diff.per.rater = list()
data = data[with(data,order(subject)),]
for(i in diff.raters){
temp = data[data$rater==i,]
diff.per.rater[[i]] = with(temp, var - mean.per.subj[, 2])
}
min.diff.raters = lapply(diff.per.rater, min)
max.diff.raters = lapply(diff.per.rater, max)
if(is.null(symbols.graph)) symbols = 1:length(diff.raters) else symbols = symbols.graph
if(length(symbols)!=length(diff.raters)) stop("Length of vector of symbols.graph is not equal to number of raters")
plot(1 , 1, xlim = range(data$var),ylim= c(min(unlist(min.diff.raters)),
max(unlist(max.diff.raters))), col="white", ...)
for(i in unique(diff.raters)){
if(!is.null(colSymbols)) points(mean.per.subj[, 2] ,diff.per.rater[[i]], pch = symbols[which(i==diff.raters)],
col = colSymbols[which(unique(diff.raters=i))])
else points(mean.per.subj[, 2], diff.per.rater[[i]], pch = symbols[which(i==diff.raters)])
}
abline(h = 0, lty = 2)
if(LoA=="Default"){
abline(h=sqrt(MSE) * 1.96)
abline(h=sqrt(MSE) * -1.96)
}else{
temp2 = matrix(NA, m, 1)
for(i in seq_len(m)){
temp = NULL
for(j in 1:length(diff.raters)){
temp = c(temp, (diff.per.rater[[j]][i]))
}
temp2[i,] = sd(temp)
}
ArgzLoessLCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (-1.96*(temp2))[order(mean.per.subj[,2])]))
ArgzLoessUCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (1.96*(temp2))[order(mean.per.subj[,2])]))
LoessLCL = do.call("loess.smooth", ArgzLoessLCL)
lines(LoessLCL$x, LoessLCL$y, lwd = 2)
LoessUCL = do.call("loess.smooth", ArgzLoessUCL)
lines(LoessUCL$x, LoessUCL$y, lwd = 2)
}
if(Legend && length(ArgzLegend)==1){
ArgzLegend = append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols, bty = "n"))
}
if(Legend) do.call("legend", ArgzLegend)
return(list(AnovaSummary=summ, AvgPerSubject = mean.per.subj))
}
BAplotMultipleR(Rater, Subj, Value, Dflong)
BAplotMultipleR <- function(rater, subject, variable, data, LoA = c("Default", "loess"), ArgzLoess = list(span = 1, degree = 1),
symbols.graph=NULL, colSymbols=NULL,
Legend = F, ArgzLegend = list(x = "topright"),
xlab = "Average", ylab = "Difference",
...){
if(missing(data)|!is.data.frame(data)) stop(paste(data,"must be of type dataframe"))
arguments =  as.list(match.call())
LoA = match.arg(LoA)
if(Legend && !is.list(ArgzLegend)) stop("ArgzLegend must be of type list.")
data$rater = eval(arguments$rater,data)
if(!is.factor(data$rater)) data$rater = tryCatch(as.factor(data$rater), warning = function(w) stop("Conversion of rater to factor failed"),
error = function(e) stop("Conversions of rater to factor failed"))
data$subject = eval(arguments$subject,data)
if(!is.factor(data$subject)) data$subject = tryCatch(as.factor(data$subject), warning = function(w) stop("Conversion of subject to factor failed"),
error = function(e) stop("Conversions of subject to factor failed"))
data$var = eval(arguments$variable,data)
if(!is.numeric(data$var)) data$var = tryCatch(as.numeric(data$var),
warning = function(w) stop("Conversion of variable to numeric failed"),
error = function(e) stop("Conversions of variable to numeric failed"))
if(anyNA(data$var)) stop("Missing values detected.")
summ = summary(aov(var ~ subject + rater, data = data))
MSE  = summ[[1]]$`Mean Sq`[3]
m = length(unique(data$subject))
# Plot
mean.per.subj  = with(data, aggregate(var, by = list(subject), mean))
diff.raters    = unique(data$rater)
diff.per.rater = list()
data = data[with(data,order(subject)),]
for(i in diff.raters){
temp = data[data$rater==i,]
diff.per.rater[[i]] = with(temp, var - mean.per.subj[, 2])
}
min.diff.raters = lapply(diff.per.rater, min)
max.diff.raters = lapply(diff.per.rater, max)
if(is.null(symbols.graph)) symbols = 1:length(diff.raters) else symbols = symbols.graph
if(length(symbols)!=length(diff.raters)) stop("Length of vector of symbols.graph is not equal to number of raters")
plot(1 , 1, xlim = range(data$var),ylim= c(min(unlist(min.diff.raters)),
max(unlist(max.diff.raters))), col="white", xlab = xlab, ylab = ylab, ...)
for(i in unique(diff.raters)){
if(!is.null(colSymbols)) points(mean.per.subj[, 2] ,diff.per.rater[[i]], pch = symbols[which(i==diff.raters)],
col = colSymbols[which(unique(diff.raters=i))])
else points(mean.per.subj[, 2], diff.per.rater[[i]], pch = symbols[which(i==diff.raters)])
}
abline(h = 0, lty = 2)
if(LoA=="Default"){
abline(h=sqrt(MSE) * 1.96)
abline(h=sqrt(MSE) * -1.96)
}else{
temp2 = matrix(NA, m, 1)
for(i in seq_len(m)){
temp = NULL
for(j in 1:length(diff.raters)){
temp = c(temp, (diff.per.rater[[j]][i]))
}
temp2[i,] = sd(temp)
}
ArgzLoessLCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (-1.96*(temp2))[order(mean.per.subj[,2])]))
ArgzLoessUCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (1.96*(temp2))[order(mean.per.subj[,2])]))
LoessLCL = do.call("loess.smooth", ArgzLoessLCL)
lines(LoessLCL$x, LoessLCL$y, lwd = 2)
LoessUCL = do.call("loess.smooth", ArgzLoessUCL)
lines(LoessUCL$x, LoessUCL$y, lwd = 2)
}
if(Legend && length(ArgzLegend)==1){
ArgzLegend = append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols, bty = "n"))
}
if(Legend) do.call("legend", ArgzLegend)
return(list(AnovaSummary=summ, AvgPerSubject = mean.per.subj))
}
BAplotMultipleR(Rater, Subj, Value, Dflong)
BAplotMultipleR <- function(rater, subject, variable, data, LoA = c("Default", "loess"), ArgzLoess = list(span = 1, degree = 1),
symbols.graph=NULL, colSymbols=NULL,
Legend = F, ArgzLegend = list(x = "topright"),
xlab = "Average", ylab = "Difference",
...){
if(missing(data)|!is.data.frame(data)) stop(paste(data,"must be of type dataframe"))
arguments =  as.list(match.call())
LoA = match.arg(LoA)
if(Legend && !is.list(ArgzLegend)) stop("ArgzLegend must be of type list.")
data$rater = eval(arguments$rater,data)
if(!is.factor(data$rater)) data$rater = tryCatch(as.factor(data$rater), warning = function(w) stop("Conversion of rater to factor failed"),
error = function(e) stop("Conversions of rater to factor failed"))
data$subject = eval(arguments$subject,data)
if(!is.factor(data$subject)) data$subject = tryCatch(as.factor(data$subject), warning = function(w) stop("Conversion of subject to factor failed"),
error = function(e) stop("Conversions of subject to factor failed"))
data$var = eval(arguments$variable,data)
if(!is.numeric(data$var)) data$var = tryCatch(as.numeric(data$var),
warning = function(w) stop("Conversion of variable to numeric failed"),
error = function(e) stop("Conversions of variable to numeric failed"))
if(anyNA(data$var)) stop("Missing values detected.")
summ = summary(aov(var ~ subject + rater, data = data))
MSE  = summ[[1]]$`Mean Sq`[3]
m = length(unique(data$subject))
# Plot
mean.per.subj  = with(data, aggregate(var, by = list(subject), mean))
diff.raters    = unique(data$rater)
diff.per.rater = list()
data = data[with(data,order(subject)),]
for(i in diff.raters){
temp = data[data$rater==i,]
diff.per.rater[[i]] = with(temp, var - mean.per.subj[, 2])
}
min.diff.raters = lapply(diff.per.rater, min)
max.diff.raters = lapply(diff.per.rater, max)
if(is.null(symbols.graph)) symbols = 1:length(diff.raters) else symbols = symbols.graph
if(length(symbols)!=length(diff.raters)) stop("Length of vector of symbols.graph is not equal to number of raters")
plot(1 , 1, xlim = range(data$var),ylim= c(min(unlist(min.diff.raters)),
max(unlist(max.diff.raters))), col="white", xlab = xlab, ylab = ylab, ...)
for(i in unique(diff.raters)){
if(!is.null(colSymbols)) points(mean.per.subj[, 2] ,diff.per.rater[[i]], pch = symbols[which(i==diff.raters)],
col = colSymbols[which(unique(diff.raters=i))])
else points(mean.per.subj[, 2], diff.per.rater[[i]], pch = symbols[which(i==diff.raters)])
}
abline(h = 0, lty = 2)
if(LoA=="Default"){
abline(h=sqrt(MSE) * 1.96)
abline(h=sqrt(MSE) * -1.96)
}else{
temp2 = matrix(NA, m, 1)
for(i in seq_len(m)){
temp = NULL
for(j in 1:length(diff.raters)){
temp = c(temp, (diff.per.rater[[j]][i]))
}
temp2[i,] = sd(temp)
}
ArgzLoessLCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (-1.96*(temp2))[order(mean.per.subj[,2])]))
ArgzLoessUCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (1.96*(temp2))[order(mean.per.subj[,2])]))
LoessLCL = do.call("loess.smooth", ArgzLoessLCL)
lines(LoessLCL$x, LoessLCL$y, lwd = 2)
LoessUCL = do.call("loess.smooth", ArgzLoessUCL)
lines(LoessUCL$x, LoessUCL$y, lwd = 2)
}
if(Legend && length(ArgzLegend)==1){
ArgzLegend = append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols, bty = "n"))
}
colnames(mean.per.subj) = c("Subject", "Average")
if(Legend) do.call("legend", ArgzLegend)
return(list(AnovaSummary=summ, AvgPerSubject = mean.per.subj))
}
BAplotMultipleR(Rater, Subj, Value, Dflong)
library(AGREL)
BAplotMultipleR(Rater, Subj, Value, Dflong)
BAplotMultipleR(Rater, Subj, Value, Dflong) -> meh
meh
library(AGREL)
BAplotMultipleR(Rater, Subj, Value, Dflong)
BAplotMultipleR(Rater, Subj, Value, Dflong) -> meh
meh
meh$AnovaSummary
class(meh)
BAplotMultipleR <- function(rater, subject, variable, data, LoA = c("Default", "loess"), ArgzLoess = list(span = 1, degree = 1),
symbols.graph=NULL, colSymbols=NULL,
Legend = F, ArgzLegend = list(x = "topright"),
xlab = "Average", ylab = "Difference",
...){
if(missing(data)|!is.data.frame(data)) stop(paste(data,"must be of type dataframe"))
arguments =  as.list(match.call())
LoA = match.arg(LoA)
if(Legend && !is.list(ArgzLegend)) stop("ArgzLegend must be of type list.")
data$rater = eval(arguments$rater,data)
if(!is.factor(data$rater)) data$rater = tryCatch(as.factor(data$rater), warning = function(w) stop("Conversion of rater to factor failed"),
error = function(e) stop("Conversions of rater to factor failed"))
data$subject = eval(arguments$subject,data)
if(!is.factor(data$subject)) data$subject = tryCatch(as.factor(data$subject), warning = function(w) stop("Conversion of subject to factor failed"),
error = function(e) stop("Conversions of subject to factor failed"))
data$var = eval(arguments$variable,data)
if(!is.numeric(data$var)) data$var = tryCatch(as.numeric(data$var),
warning = function(w) stop("Conversion of variable to numeric failed"),
error = function(e) stop("Conversions of variable to numeric failed"))
if(anyNA(data$var)) stop("Missing values detected.")
summ = summary(aov(var ~ subject + rater, data = data))
MSE  = summ[[1]]$`Mean Sq`[3]
m = length(unique(data$subject))
# Plot
mean.per.subj  = with(data, aggregate(var, by = list(subject), mean))
diff.raters    = unique(data$rater)
diff.per.rater = list()
data = data[with(data,order(subject)),]
for(i in diff.raters){
temp = data[data$rater==i,]
diff.per.rater[[i]] = with(temp, var - mean.per.subj[, 2])
}
min.diff.raters = lapply(diff.per.rater, min)
max.diff.raters = lapply(diff.per.rater, max)
if(is.null(symbols.graph)) symbols = 1:length(diff.raters) else symbols = symbols.graph
if(length(symbols)!=length(diff.raters)) stop("Length of vector of symbols.graph is not equal to number of raters")
plot(1 , 1, xlim = range(data$var),ylim= c(min(unlist(min.diff.raters)),
max(unlist(max.diff.raters))), col="white", xlab = xlab, ylab = ylab, ...)
for(i in unique(diff.raters)){
if(!is.null(colSymbols)) points(mean.per.subj[, 2] ,diff.per.rater[[i]], pch = symbols[which(i==diff.raters)],
col = colSymbols[which(unique(diff.raters=i))])
else points(mean.per.subj[, 2], diff.per.rater[[i]], pch = symbols[which(i==diff.raters)])
}
abline(h = 0, lty = 2)
if(LoA=="Default"){
abline(h=sqrt(MSE) * 1.96)
abline(h=sqrt(MSE) * -1.96)
}else{
temp2 = matrix(NA, m, 1)
for(i in seq_len(m)){
temp = NULL
for(j in 1:length(diff.raters)){
temp = c(temp, (diff.per.rater[[j]][i]))
}
temp2[i,] = sd(temp)
}
ArgzLoessLCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (-1.96*(temp2))[order(mean.per.subj[,2])]))
ArgzLoessUCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (1.96*(temp2))[order(mean.per.subj[,2])]))
LoessLCL = do.call("loess.smooth", ArgzLoessLCL)
lines(LoessLCL$x, LoessLCL$y, lwd = 2)
LoessUCL = do.call("loess.smooth", ArgzLoessUCL)
lines(LoessUCL$x, LoessUCL$y, lwd = 2)
}
if(Legend && length(ArgzLegend)==1){
ArgzLegend = append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols, bty = "n"))
}
colnames(mean.per.subj) = c("Subject", "Average")
if(Legend) do.call("legend", ArgzLegend)
Results = list(AnovaSummary=summ, AvgPerSubject = mean.per.subj)
class(Results) = append(class(Results), "BAplotMultipleR")
return(Results)
}
BAplotMultipleR(Rater, Subj, Value, Dflong)
library(AGREL)
library(AGREL)
BAplotMultipleR(Rater, Subj, Value, Dflong)
long
rownames(long) = NULL
long
write.table(long, paste0(getwd(), "/data/DentalStudy.txt"), sep = "\t")
library(AGREL)
data("DentalStudy")
promptData(DentalStudy)
head(DentalStudy)
BAplotMultipleR(time, patient, ex, DentalStudy)
require(psych)
?ICC
?irr::icc
DfICC = TransfData(subject, var, rater, data)
DfICC
ICCv  = ICC(DfICC)
ICCv
print(ICCv)
ICCv$summary
print.ICC(ICCv)
psych:::print.ICC(ICCv)
class(ICCv)
ICCv$stats
write.table(long, paste0(getwd(), "/data/DentalStudy.txt"), sep = "\t")
colnames(DentalStudy)
colnames(DentalStudy) = c("patient", "dentist", "DMFS")
write.table(long, paste0(getwd(), "/data/DentalStudy.txt"), sep = "\t")
?CohenK
names(meh)
names(BAplotMultipleR(dentist, patient, DMFS, DentalStudy))
library(AGREL)
names(BAplotMultipleR(dentist, patient, DMFS, DentalStudy))
BAplotMultipleR
#' Modified Bland-Altman plot for multiple raters
#'
#' @param rater Variable indicating which rater made the rating.
#' @param subject Variable for the subject.
#' @param variable Variable containing the ratings of the subjects.
#' @param data The dataframe
#' @param LoA The limits of agreement that have to be used. See details.
#' @param ArgzLoess Arguments for \code{loess.smooth} if \code{LoA = "loess}.
#' @param symbols.graph Optional, the symbols to be used in the graph for the raters.
#' @param colSymbols Optional, the color of the symbols
#' @param Legend Logical, indicates whether a legend has to be printed. Default is \code{TRUE}.
#' @param ArgzLegend The arguments for the legend, see \code{\link{legend}}.
#' @param xlab The label for the x-axis.
#' @param ylab The label for the y-axis.
#' @param ... Additional arguments to be passed to \code{\link{plot}}.
#'
#' @return Returns a list with the following objects
#' @return \item{}
#'
#' @references Jones M., Dobson A., O’Brian S. (2011). A graphical method for assessing agreement with the
#' mean between multiple observers using continuous measures. \emph{Int J Epidemiol}. Vol.40: pp. 1308-1313.
#'
#' @examples
#' data(DentalStudy)
#' BAplotMultipleR(dentist, patient, DMFS, DentalStudy)
BAplotMultipleR <- function(rater, subject, variable, data, LoA = c("Default", "loess"), ArgzLoess = list(span = 1, degree = 1),
symbols.graph=NULL, colSymbols=NULL,
Legend = T, ArgzLegend = list(x = "topright"),
xlab = "Average", ylab = "Difference",
...){
if(missing(data)|!is.data.frame(data)) stop(paste(data,"must be of type dataframe"))
arguments =  as.list(match.call())
LoA = match.arg(LoA)
if(Legend && !is.list(ArgzLegend)) stop("ArgzLegend must be of type list.")
data$rater = eval(arguments$rater,data)
if(!is.factor(data$rater)) data$rater = tryCatch(as.factor(data$rater), warning = function(w) stop("Conversion of rater to factor failed"),
error = function(e) stop("Conversions of rater to factor failed"))
data$subject = eval(arguments$subject,data)
if(!is.factor(data$subject)) data$subject = tryCatch(as.factor(data$subject), warning = function(w) stop("Conversion of subject to factor failed"),
error = function(e) stop("Conversions of subject to factor failed"))
data$var = eval(arguments$variable,data)
if(!is.numeric(data$var)) data$var = tryCatch(as.numeric(data$var),
warning = function(w) stop("Conversion of variable to numeric failed"),
error = function(e) stop("Conversions of variable to numeric failed"))
if(anyNA(data$var)) stop("Missing values detected.")
summ = summary(aov(var ~ subject + rater, data = data))
MSE  = summ[[1]]$`Mean Sq`[3]
m = length(unique(data$subject))
DfICC = TransfData(subject, var, rater, data)
ICCv  = ICC(DfICC)
# Plot
mean.per.subj  = with(data, aggregate(var, by = list(subject), mean))
diff.raters    = unique(data$rater)
diff.per.rater = list()
data = data[with(data,order(subject)),]
for(i in diff.raters){
temp = data[data$rater==i,]
diff.per.rater[[i]] = with(temp, var - mean.per.subj[, 2])
}
min.diff.raters = lapply(diff.per.rater, min)
max.diff.raters = lapply(diff.per.rater, max)
if(is.null(symbols.graph)) symbols = 1:length(diff.raters) else symbols = symbols.graph
if(length(symbols)!=length(diff.raters)) stop("Length of vector of symbols.graph is not equal to number of raters")
plot(1 , 1, xlim = range(data$var),ylim= c(min(unlist(min.diff.raters)),
max(unlist(max.diff.raters))), col="white", xlab = xlab, ylab = ylab, ...)
for(i in unique(diff.raters)){
if(!is.null(colSymbols)) points(mean.per.subj[, 2] ,diff.per.rater[[i]], pch = symbols[which(i==diff.raters)],
col = colSymbols[which(unique(diff.raters=i))])
else points(mean.per.subj[, 2], diff.per.rater[[i]], pch = symbols[which(i==diff.raters)])
}
abline(h = 0, lty = 2)
if(LoA=="Default"){
abline(h = sqrt(MSE) * 1.96)
abline(h = sqrt(MSE) * -1.96)
}else{
temp2 = matrix(NA, m, 1)
for(i in seq_len(m)){
temp = NULL
for(j in 1:length(diff.raters)){
temp = c(temp, (diff.per.rater[[j]][i]))
}
temp2[i,] = sd(temp)
}
ArgzLoessLCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (-1.96*(temp2))[order(mean.per.subj[,2])]))
ArgzLoessUCL = append(ArgzLoess, list(x = mean.per.subj[order(mean.per.subj[,2]),2], y = (1.96*(temp2))[order(mean.per.subj[,2])]))
LoessLCL = do.call("loess.smooth", ArgzLoessLCL)
lines(LoessLCL$x, LoessLCL$y, lwd = 2)
LoessUCL = do.call("loess.smooth", ArgzLoessUCL)
lines(LoessUCL$x, LoessUCL$y, lwd = 2)
}
if(Legend && length(ArgzLegend)==1){
ArgzLegend = append(ArgzLegend, list(legend = diff.raters, ncol = 2, pch = symbols, bty = "n"))
}
colnames(mean.per.subj) = c("Subject", "Average")
if(Legend) do.call("legend", ArgzLegend)
Results = list(AnovaSummary=summ, AvgPerSubject = mean.per.subj, LoA = c("LCL" = sqrt(MSE) * -1.96), "UCL" = sqrt(MSE) * 1.96,
ICC = ICCv)
class(Results) = append(class(Results), "BAplotMultipleR")
return(Results)
}
names(BAplotMultipleR(dentist, patient, DMFS, DentalStudy))
?CohenK
library(AGREL)
?BAplotMultipleR
pc.hibernate
pc.hibernate()
library(AGREL)
?BAplotMultipleR
?BAplotMultipleR
?DentalStudy
library(AGREL)
RmAll()
data("DentalStudy")
BAplotMultipleR(dentist, patient, DMFS, DentalStudy)
opendir()
?BAplotMultipleR
library(AGREL)
data(DentalStudy)
colnames(DentalStudy)
BAplotMultipleR(dentist, patient, DMFS, DentalStudy)
?BAplotMultipleR
data(DentalStudy)
op = par()
par(cex = 0.5, cex.lab = 0.5, cex.leg = 0.35)
BAplotMultipleR(dentist, patient, DMFS, DentalStudy)
par(op)
?par
data(DentalStudy)
op = par()
par(cex = 0.5, cex.lab = 0.5, cex.axis = 0.45)
BAplotMultipleR(dentist, patient, DMFS, DentalStudy)
par(op)
?BAplotMultipleR
close.drive()
pc.hibernate()
19/20 + 17/20
(19/20 + 17/20)/2
(19/20 + 15/20)/2
pc.hibernate()
pc.hibernate()
pc.hibernate()
opendir()
library(AGREL)
library(AGREL)
?AGREL
library(AGREL)
library(AGREL)
?AGREL
?AGREL-package
?`AGREL-package`
require(Rcpp)
?Rcpp
vignette("AGREL")
vignette("Agreement and reliability analysis using AGREL")
library(AGREL)
opendir("C:/Users/u0095171/AppData/Local/Temp/RtmpIvI9Vb/preview-2a6828be49c3.dir/")
remove.packages("AGREL")
devtools::install_git("https://github.com/BavoDC/AGREL")
require(AGREL)
?AGREL
